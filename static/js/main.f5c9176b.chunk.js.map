{"version":3,"sources":["utils/helpers.ts","contexts/barsInfoProvider.tsx","components/MenuBar/MenuBar.tsx","components/Bar/Bar.tsx","components/BarsContainer/BarsContainer.tsx","utils/heap_sort.ts","utils/merge_sort.ts","utils/insertion_sort.ts","utils/selection_sort.ts","utils/bubble_sort.ts","utils/quick_sort.ts","utils/sort.ts","components/SortingAlgoOptions/SortingAlgoOptions.tsx","contexts/sortingStatusProvier.tsx","components/Visualizer/Visualizer.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["sortingAlgos","resetArray","array","i","length","getRandomInt","generateArray","arr","Array","resetBarColors","colors","generateBarColors","min","max","Math","ceil","floor","random","sleep","delay","Promise","resolve","setTimeout","BarsInfoContext","createContext","undefined","useBarsInfo","ctxValue","useContext","Error","BarsInfoProvider","props","useState","barsInfo","setBarsInfo","Provider","value","children","MenuBar","sortHandler","useEffect","className","onClick","prevBarsInfo","console","log","Bar","val","width","spacing","index","showNumber","color","barStyles","height","left","backgroundColor","style","BarsContainer","barsContainerStyles","nb","wb","map","num","idx","heapSort","speed","a","getChildrenIndices","parentIdx","size","right","getParentIdx","childIdx","getPrioritizedChildIndex","b","heapifyDown","maxChildIndex","inPlaceSwap","element","heapify","lastInternalNodeIndex","heapSortUtil","n","highlighted","highlightBars","animate","megeSort","mergeTwoSortedArrays","mid","current","j","iBackup","mergeSortUtil","highlightedBounds","insertionSort","afterReset","selectionSort","lastIndex","largest","indexOfLargest","lastBarHighlighted","colorsAfterSwapping","swapped","swap","bubbleSort","dehighlited","quickSort","quickSortUtil","pivotPartition","pivotIndex","pivot","pivotHighlighted","pointersHighlighted","temp","indices","k","includes","push","newArray","newColors","sort","algoName","inMin","outMin","SortingAlgoOptions","sortingAlgo","algoChangeHandler","data-value","SortingStatusContext","useSortingStatus","SortingStatusProvider","sortingStatus","setSortingStatus","useStyles","makeStyles","slider","position","transform","speedSlider","top","rail","borderRadius","opacity","PrettoSlider","withStyles","root","thumb","border","marginTop","marginLeft","boxShadow","active","valueLabel","track","Slider","Visualizer","setSortingAlgo","sortingSpeed","setSortingSpeed","sortTestResultRef","useRef","styledClasses","valueLabelDisplay","aria-label","defaultValue","onChange","e","newLength","orientation","newVal","ref","target","dataset","AppWrapper","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f5c9176b.chunk.js","sourcesContent":["export const MIN_NUM = 10\nexport const MAX_NUM = 100\nexport const DEFAULT_ARRAY_LENGTH = 30\n\nexport const sortingAlgos = {\n    BUBBLE_SORT: \"bubble-sort\",\n    INSERTION_SORT: \"insertion-sort\",\n    SELECTION_SORT: \"selection-sort\",\n    MERGE_SORT: \"merge-sort\",\n    QUICK_SORT: \"quick-sort\",\n    HEAP_SORT: \"heap-sort\"\n}\n\nexport const resetArray = (array: number[]) => {\n    for (let i = 0; i < array.length; i++) {\n        array[i] = getRandomInt(MIN_NUM, MAX_NUM)\n    }\n\n    return array\n}\n\nexport const generateArray = (length: number) => {\n    let arr = new Array(length)\n    return resetArray(arr)\n}\n\nexport const resetBarColors = (colors: string[]) => {\n    for (let i = 0; i < colors.length; i++) {\n        colors[i] = \"\"\n    }\n\n    return colors\n}\n\nexport const generateBarColors = (length: number) => {\n    let colors = new Array<string>(length)\n    return resetBarColors(colors)\n}\n\nexport const mapStateToProps = (state: any) => {\n    return { ...state }\n}\n\n// https://stackoverflow.com/questions/1527803/generating-random-whole-numbers-in-javascript-in-a-specific-range\nfunction getRandomInt(min: number, max: number) {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nexport const sleep = (delay: number) => {\n    return new Promise((resolve) => setTimeout(resolve, delay * 1000));\n}\n\n// https://stackoverflow.com/questions/10756313/javascript-jquery-map-a-range-of-numbers-to-another-range-of-numbers\nexport function scale(number: number, inMin: number, inMax: number, outMin: number, outMax: number) {\n    return (number - inMin) * (outMax - outMin) / (inMax - inMin) + outMin;\n}","import React, { useContext, createContext, useState, Dispatch, SetStateAction } from \"react\";\nimport { DEFAULT_ARRAY_LENGTH, generateArray, generateBarColors } from \"../utils/helpers\";\n\nexport interface IFC_ProviderProps {\n    children?: any\n}\n\nexport interface BarsInfoContextData {\n    array: number[],\n    colors: string[]\n}\n\nexport interface BarsInfoContextValue {\n    barsInfo: BarsInfoContextData;\n    setBarsInfo: Dispatch<SetStateAction<BarsInfoContextData>>;\n}\n\nexport const BarsInfoContext = createContext<BarsInfoContextValue | undefined>(undefined)\n\nconst BarsInfoProvider = (props: IFC_ProviderProps) => {\n    const [barsInfo, setBarsInfo] = useState<BarsInfoContextData>({\n        array: generateArray(DEFAULT_ARRAY_LENGTH),\n        colors: generateBarColors(DEFAULT_ARRAY_LENGTH)\n    })\n\n    return (\n        <BarsInfoContext.Provider value={{ barsInfo, setBarsInfo }}>\n            {props.children}\n        </BarsInfoContext.Provider>\n    )\n}\n\n// https://www.typescriptlang.org/play?ssl=26&ssc=1&pln=32&pc=1#code/JYWwDg9gTgLgBAJQKYEMDGMA0cDecAiwAzmCjGgBbYDKSM1MZSAghsBAHbYCuRSDTHnwDCnGEgAe8AL5wAZlAgg4AIiioMKgLAAoXZMiw4wDuKhz0SOAEkACooBuwACZIo9iGCK5dcP3EpgABtndQ4AfgAuOBQOAE8Abl1pXV0YOLArZjAwUVNJekZxOABeXGMiAFkkDm4AeUyOaIAjCAgg1A4EiuoXJAaalraO2LgUvR10zLhs3LECgDUUIO4rMpxffyIipGjZvPEpAXEknX84PkKmaMISMkoAHlor8VYYdg4H-fmjnYA+P6naSnfQSQzwNCcbYzHIHAqlRAaGAAOjQ6iYcKkX1hPxgSxWVgAPnBuBxXHITEhnH8ABSk8mU5wAShBOgM0AhUPgsw8TlcUARNLAii80Tsjj67hFRCZpT+PjO-khHGhAG1toILnRjkgALoI3j8HY0vDEaq1AZNeTLPjYYi9VyW6IWIJ8MYs1KKvzqGDcKAcOA0zbnPzYub5KTI3mSuAOZarEo4PAa8TYS46sbSP7BkPnHDCzxEVEUYKhGrjXOhgD03wjKOj-OzXrgHp0wM9clJbE4JL4tcOMBpso2zeV0IwEnxqwNIlxNP7BSZOeAckDE6naxKZXpSApHCpspgFEUAHc4PuzwBRKCKKBB5vnFSXsFIDBUmIBnkS-kXJRIE8UG4VgmHAR5WOiGCgeoVgwBAWqcnWsbxkgKhLs2Pp+gG67IXAVZVueEBnhQKDeFMWQ4nWG45nhcDQHASAODUcAFnyVjOEoKAgSAdAUBAzjeHIdHNHQZj0RwaAoF43BBGQHzJJ6Y7wMIQTADU8BlEOcoKucikBDAk7LDOLAUQOmk0dhQQVHADL7s42AcHBlCvgA1uer5IEQRAoFAcQAITJEAA\nexport const useBarsInfo = () => {\n    const ctxValue = useContext(BarsInfoContext)\n    if (ctxValue === undefined) throw new Error(\n        \"Expected an AppProvider somewhere in the react tree to set context value\")\n    return ctxValue // now has type AppContextValue\n    // or even provide domain methods for better encapsulation\n}\n\nexport default BarsInfoProvider","// import { useEffect } from 'react'\n// import { useEffect } from 'react'\n// import { useArray } from '../../contexts/arrayProvider'\nimport { useEffect } from 'react'\nimport { useBarsInfo } from '../../contexts/barsInfoProvider'\nimport { resetArray, resetBarColors } from '../../utils/helpers'\n\nimport './MenuBar.min.css'\n\ninterface MenuBarProps {\n    sortHandler: any\n}\n\nexport default function MenuBar({ sortHandler }: MenuBarProps) {\n    // const { setArray } = useArray()\n    const { barsInfo, setBarsInfo } = useBarsInfo()\n\n    // useEffect(() => {\n    //     console.log(\"MenuBar: array updated\")\n    // }, [array])\n\n    // useEffect(() => {\n    //     console.log(\"Menubar: SortHandler updated\")\n    // }, [sortHandler])\n\n    useEffect(() => {\n        // console.log(\"MenuBar: BarsInfo changed!!\")\n    }, [barsInfo])\n\n    // console.log(\"Rendering Menubar\")\n    // console.log(array);\n\n    const generateNewArray = () => {\n        // console.log(\"Generating...\")\n        // setArray((pervArr) => {\n        //     // console.log(\"Updating state\");\n        //     return [...resetArray(pervArr)]\n        // })\n\n        setBarsInfo(prevBarsInfo => {\n            console.log(\"MenuBar: Setting barsInfo\")\n            return {\n                array: resetArray(prevBarsInfo.array),\n                colors: resetBarColors(prevBarsInfo.colors)\n            }\n        })\n    }\n\n    return (\n        <div className=\"menu-bar\">\n            <button\n                className=\"generate-new-array-btn\"\n                onClick={generateNewArray}\n            >Generate New Array</button>\n            <div className=\"title\">Sorting Visualizer</div>\n            <button\n                className=\"sort-btn\"\n                onClick={sortHandler}\n            >Sort</button>\n        </div>\n    )\n}\n","import React from 'react'\n\nimport './Bar.min.css'\n\ninterface IFC_BarProps {\n    val: number;\n    index: number;\n    width: number;\n    spacing: number;\n    showNumber: Boolean;\n    color: string;\n}\n\nexport default function Bar({ val, width, spacing, index, showNumber, color }: IFC_BarProps) {\n    let bgColor = color !== \"\" ? color : \"#83DDBF\"\n\n    const barStyles = {\n        height: 4 * val,\n        width: width,\n        left: width * index + spacing * index,\n        backgroundColor: bgColor\n    }\n\n    // console.log(\"Width: \", width);\n\n    return (\n        <div className={`bar ${color}`} style={barStyles}>\n            {\n                showNumber ? <span>{val}</span> : null\n            }\n        </div>\n    )\n}\n","import React from 'react'\nimport Bar from '../Bar/Bar'\n\nimport './BarsContainer.min.css'\n\nexport interface IFC_BarsInfo {\n    array: number[],\n    colors: string[]\n}\ninterface IFC_BarsContainerProps {\n    barsInfo: IFC_BarsInfo\n}\n\nexport default function BarsContainer(props: IFC_BarsContainerProps) {\n    let { array, colors } = props.barsInfo\n\n    // console.log(\"Rendering Bars Container \");\n\n    /*\n        width = nb * wb + (nb-1) * spacing\n        nb = no. of bars\n        wb = bar width\n        spacing = space b/w each bar\n\n        Hence wb = (width - ((nb-1) * spacing))/(nb)\n    */\n\n    const barsContainerStyles = {\n        width: 1000\n    }\n\n    let nb = array.length\n    let spacing = 2\n    let wb = barsContainerStyles.width / nb\n    wb -= spacing\n    let showNumber = array.length <= 45\n\n\n    return (\n        <div className={`bars-container`} style={barsContainerStyles}>\n            {array.map((num, idx) => <Bar val={num}\n                index={idx}\n                key={idx}\n                width={wb}\n                spacing={spacing}\n                showNumber={showNumber}\n                color={colors[idx]}\n            />)}\n        </div>\n    )\n}\n","import { animate, highlightBars, inPlaceSwap } from './sort';\nimport { IFC_BarsInfo } from \"../components/BarsContainer/BarsContainer\"\n\nexport const heapSort = async (barsInfo: IFC_BarsInfo, setBarsInfo: React.Dispatch<React.SetStateAction<IFC_BarsInfo>>, speed: number) => {\n    let delay = 1 / speed\n\n    const getChildrenIndices = async (parentIdx: number, size: number) => {\n        let left, right;\n\n        left = 2 * parentIdx + 1;\n        right = 2 * parentIdx + 2;\n\n        left = (left >= size) ? -1 : left;\n        right = (right >= size) ? -1 : right;\n\n        return { left, right };\n\n    }\n\n    const getParentIdx = async (childIdx: number) => {\n        return Math.ceil(childIdx / 2) - 1;\n    }\n\n    const getPrioritizedChildIndex = async (arr: number[], parentIdx: number, size: number) => {\n        let children = await getChildrenIndices(parentIdx, size)\n\n        if (children.left === -1 && children.right !== -1) {\n            return children.right\n        }\n\n        if (children.left !== -1 && children.right === -1) {\n            return children.left\n        }\n\n        // Leaf\n        if (children.left === -1 && children.right === -1) {\n            return -1\n        }\n\n        let a = arr[children.left]\n        let b = arr[children.right]\n\n        return a >= b ? children.left : children.right\n    }\n\n    const heapifyDown = async (arr: number[], idx: number, size: number) => {\n        let maxChildIndex: number\n\n        while (true) {\n            maxChildIndex = await getPrioritizedChildIndex(arr, idx, size)\n            if (maxChildIndex === -1) {\n                break\n            }\n            if (arr[maxChildIndex] <= arr[idx]) {\n                break\n            }\n            inPlaceSwap(maxChildIndex, idx, arr)\n            idx = maxChildIndex\n        }\n\n        return\n    }\n\n    const heapifyUp = async (arr: number[], idx: number) => {\n        let element = arr[idx]\n        let parentIdx\n\n        while (true) {\n            parentIdx = await getParentIdx(idx)\n\n            if ((idx <= 0) || arr[parentIdx] >= element) {\n                // Reached Root or Parent > Child\n                break\n            }\n            inPlaceSwap(parentIdx, idx, arr)\n            idx = parentIdx\n        }\n        return\n    }\n\n    const heapify = async (arr: number[], size: number) => {\n        let lastInternalNodeIndex = Math.ceil(size / 2) - 1\n\n        for (let i = lastInternalNodeIndex; i >= 0; i--) {\n            await heapifyDown(arr, i, size)\n        }\n    }\n\n    const heapSortUtil = async (arr: number[]) => {\n        let n = arr.length\n\n        while (n > 0) {\n            await heapify(arr, n)\n\n            // Now the first element be the max element... Highlight it and swap it with the last element\n            let highlighted = highlightBars(barsInfo.colors, [0], \"green\")\n            highlighted = highlightBars(highlighted, [n - 1], \"purple\")\n            await animate(arr, highlighted, setBarsInfo, delay)\n\n            inPlaceSwap(0, n - 1, arr)\n\n            highlighted = highlightBars(barsInfo.colors, [n - 1], \"lightgreen\")\n            highlighted = highlightBars(highlighted, [0], \"\")\n            await animate(arr, highlighted, setBarsInfo, delay)\n\n            n -= 1\n        }\n    }\n\n    let { array } = barsInfo\n    await heapSortUtil(array)\n    // console.log(array)\n\n    await animate(array, barsInfo.colors, setBarsInfo, delay)\n\n    return array\n}","import { IFC_BarsInfo } from \"../components/BarsContainer/BarsContainer\"\nimport { animate } from \"./sort\"\nimport { highlightBars } from \"./sort\"\n\nexport const megeSort = async (barsInfo: IFC_BarsInfo, setBarsInfo: React.Dispatch<React.SetStateAction<IFC_BarsInfo>>, speed: number) => {\n    let delay = 1 / speed\n\n    const mergeTwoSortedArrays = async (arr: number[], left: number, mid: number, right: number) => {\n        // console.log({ left, mid, right })\n        // We're actually dealing with an array from left1 to right2 in the original array\n        // [.....left1  ..... right2.....]\n        // For each element in the 2nd part find its correct position and shift the elements accordingly\n        // This is very similar to insertion sort\n\n        // console.log(\"Merging\", \"from \", left, \"to\", right)\n\n        for (let i = mid; i <= right; i++) {\n            let current = arr[i]\n            let j\n\n            for (j = i - 1; j >= left; j--) {\n                if (arr[j] <= current) {\n                    break\n                }\n            }\n            j += 1\n\n            // if i == j then the element is already in the correct position\n            let highlighted\n            let iBackup = i\n            if (i !== j) {\n                highlighted = highlightBars(barsInfo.colors, [i, j], \"red\")\n                await animate(array, highlighted, setBarsInfo, delay)\n\n                while (i > j) {\n                    arr[i] = arr[i - 1]\n                    i--;\n                }\n\n                arr[i] = current;\n            }\n            i = iBackup\n            highlighted = highlightBars(barsInfo.colors, [i, j], \"green\")\n            await animate(array, highlighted, setBarsInfo, delay)\n\n        }\n        // console.log(\"After merge:\", arr)\n\n        return\n    }\n\n    const mergeSortUtil = async (arr: number[], left: number, right: number) => {\n        // console.log({ left, right })\n        let highlightedBounds = highlightBars(barsInfo.colors, [left], \"yellow\")\n        highlightedBounds = highlightBars(highlightedBounds, [right], \"blue\")\n\n        await animate(arr, highlightedBounds, setBarsInfo, delay)\n\n        if (left >= right || right === left + 1) {\n            return\n        }\n        let mid = Math.floor((left + right) / 2)\n\n        await mergeSortUtil(arr, left, mid)\n        await mergeSortUtil(arr, mid + 1, right)\n        await mergeTwoSortedArrays(arr, left, mid, right)\n    }\n\n    let n = barsInfo.array.length\n    let array = barsInfo.array\n\n    // console.log(array)\n\n    await mergeSortUtil(array, 0, n - 1)\n    // console.log(array)\n    await animate(array, barsInfo.colors, setBarsInfo, 0)\n\n    return array\n}","import { resetBarColors } from './helpers';\nimport { animate, highlightBars } from './sort';\nimport { IFC_BarsInfo } from \"../components/BarsContainer/BarsContainer\"\n\nexport const insertionSort = async (barsInfo: IFC_BarsInfo, setBarsInfo: React.Dispatch<React.SetStateAction<IFC_BarsInfo>>, speed: number) => {\n    let delay = 1 / speed;\n\n    let { array } = barsInfo\n    let n = array.length\n\n    for (let i = 1; i < n; i++) {\n        let j\n        let current = array[i]\n        // Highlight the current element to indicate that we're finding the correct posistion of this element\n        let highlighted = highlightBars(barsInfo.colors, [i], \"purple\")\n        await animate(array, highlighted, setBarsInfo, delay)\n\n        // Find the actual position of array[i]\n        // => move the element left so that all the elements on right are bigger than this.\n        // This loop finds the index of such element\n        for (j = i - 1; j >= 0; j--) {\n            // Turn all these bars red\n            if (array[j] <= current) {\n                break\n            }\n            highlighted = highlightBars(highlighted, [j], \"red\")\n            // await animate(array, highlighted, setBarsInfo, delay)\n        }\n        // We actually move a step leftward because of forloop\n        // Increment it once to bring it to the correct position\n        j += 1\n\n        // if i == j then the element is in the correct position\n        let iBackup = i\n        if (i !== j) {\n            // highlight this bar as we need to replace it\n            highlighted = highlightBars(highlighted, [j], \"red\")\n            await animate(array, highlighted, setBarsInfo, delay)\n\n            // Move all the element from this j to i one step towards right\n            while (i > j) {\n                array[i] = array[i - 1]\n                i--;\n            }\n\n            // Bring the current element to this correct position\n            array[i] = current;\n            highlighted = highlightBars(highlighted, [iBackup], \"red\")\n        }\n        i = iBackup\n\n        highlighted = highlightBars(highlighted, [j], \"green\")\n        await animate(array, highlighted, setBarsInfo, delay)\n    }\n    let afterReset = resetBarColors(barsInfo.colors)\n    await animate(array, afterReset, setBarsInfo, delay)\n\n    return array\n}","import { resetBarColors } from './helpers';\nimport { highlightBars, swap, animate } from './sort';\nimport { IFC_BarsInfo } from './../components/BarsContainer/BarsContainer';\n\nexport const selectionSort = async (barsInfo: IFC_BarsInfo, setBarsInfo: React.Dispatch<React.SetStateAction<IFC_BarsInfo>>, speed: number) => {\n    let { array, colors } = barsInfo\n    let n = array.length\n    let delay = 1 / speed\n\n    let lastIndex = n - 1\n\n    let highlighted = colors\n    while (lastIndex >= 0) {\n        let largest = array[0]\n        let indexOfLargest = 0\n\n        let lastBarHighlighted = highlightBars(barsInfo.colors, [lastIndex], \"purple\")\n        // await animate(array, highlighted, setBarsInfo, delay)\n\n        let i\n        for (i = 0; i <= lastIndex; i++) {\n            // Time to update the new largest\n            if (array[i] > largest) {\n                // console.log(\"Largest is at\", i)\n                largest = array[i]\n                indexOfLargest = i\n            }\n\n            if (i === indexOfLargest) {\n                highlighted = highlightBars(lastBarHighlighted, [i], \"red\")\n                await animate(array, highlighted, setBarsInfo, delay)\n            }\n        }\n        highlighted = highlightBars(lastBarHighlighted, [indexOfLargest], \"green\")\n        await animate(array, highlighted, setBarsInfo, delay)\n\n        // Now we have the largest element.\n        // Swap it with the last element\n        // console.log(\"Swapping \", lastIndex, \"with\", indexOfLargest)\n\n        // Highlight the last element before swapping\n        // await animate(array, highlighted, setBarsInfo, delay)\n\n        let colorsAfterSwapping = highlightBars(highlighted, [indexOfLargest], \"purple\")\n        colorsAfterSwapping = highlightBars(colorsAfterSwapping, [lastIndex], \"green\")\n        let swapped = swap(lastIndex, indexOfLargest, array)\n\n        await animate(swapped, colorsAfterSwapping, setBarsInfo, delay)\n\n        array = [...swapped]\n        lastIndex -= 1\n    }\n\n    let afterReset = resetBarColors(barsInfo.colors)\n    await animate(array, afterReset, setBarsInfo, delay)\n\n    return array\n    // console.log(array)\n}","\nimport { IFC_BarsInfo } from './../components/BarsContainer/BarsContainer';\nimport { swap, highlightBars, animate } from './sort';\n\nexport const bubbleSort = async (barsInfo: IFC_BarsInfo, setBarsInfo: React.Dispatch<React.SetStateAction<IFC_BarsInfo>>, speed: number) => {\n    // console.log(\"Before sort: \", array);\n    let { array, } = barsInfo\n\n    let i, j, delay = 1 / speed\n    for (i = 0; i <= array.length; i++) {\n        for (j = 0; j < array.length - i - 1; j++) {\n            if (array[j] > array[j + 1]) {\n                // These two elements are in wrong order.\n                // Turn them red and wait for a few secs.\n                let highlighted = highlightBars(barsInfo.colors, [j, j + 1], \"red\")\n                await animate(array, highlighted, setBarsInfo, delay)\n\n                // Now swap these two numbers\n                let swapped = swap(j, j + 1, array)\n\n                // These are in the correct positions\n                // TUrn them green\n                let dehighlited = highlightBars(barsInfo.colors, [j, j + 1], \"green\")\n\n                // Update barsInfo and wait for a few secs\n                await animate(swapped, dehighlited, setBarsInfo, delay)\n            } else {\n                // They are in the positions they are supposed to be in\n                // Turn them green and wait for a few secs\n                let highlighted = highlightBars(barsInfo.colors, [j, j + 1], \"green\")\n                await animate(array, highlighted, setBarsInfo, delay)\n            }\n        }\n        // Now the last number is in sorted position\n        // Turn in green and wait\n        let highlighted = highlightBars(barsInfo.colors, [j], \"\")\n        await animate(array, highlighted, setBarsInfo, delay)\n    }\n    // console.log(\"After sort: \", array);\n    return array\n}","import { animate, highlightBars, inPlaceSwap } from './sort';\nimport { IFC_BarsInfo } from \"../components/BarsContainer/BarsContainer\"\n\nexport const quickSort = async (barsInfo: IFC_BarsInfo, setBarsInfo: React.Dispatch<React.SetStateAction<IFC_BarsInfo>>, speed: number) => {\n    let delay = 1 / speed\n\n    const quickSortUtil = async (arr: number[], left: number, right: number) => {\n        if (left >= right) {\n            return\n        }\n\n        let highlighted = barsInfo.colors\n        highlightBars(highlighted, [left], \"yellow\")\n        highlightBars(highlighted, [right], \"blue\")\n\n        let pivotIndex = await pivotPartition(arr, left, right)\n        await quickSortUtil(arr, left, pivotIndex - 1)\n        await quickSortUtil(arr, pivotIndex + 1, right)\n    }\n    const pivotPartition = async (arr: number[], left: number, right: number) => {\n        let highlighted = barsInfo.colors\n\n        let pivotIndex = right\n        let pivot = arr[pivotIndex]\n\n        let pivotHighlighted = highlightBars(highlighted, [pivotIndex], \"purple\")\n\n        let i = left\n        let j\n\n        for (j = left; j < right; j++) {\n            let pointersHighlighted = pivotHighlighted\n            pointersHighlighted = highlightBars(pointersHighlighted, [i], \"orange\")\n            pointersHighlighted = highlightBars(pointersHighlighted, [j], \"magenta\")\n            await animate(arr, pointersHighlighted, setBarsInfo, delay)\n\n            if (arr[j] < pivot) {\n                // If i == j then i is already in its correct position... Don't need to turn it red or swap\n                if (i !== j) {\n\n                    pointersHighlighted = highlightBars(pointersHighlighted, [i], \"red\")\n                    pointersHighlighted = highlightBars(pointersHighlighted, [j], \"lightgreen\")\n                    await animate(arr, pointersHighlighted, setBarsInfo, delay)\n\n                    inPlaceSwap(i, j, arr)\n                }\n\n                pointersHighlighted = highlightBars(pointersHighlighted, [i], \"lightgreen\")\n                pointersHighlighted = highlightBars(pointersHighlighted, [j], \"magenta\")\n                await animate(arr, pointersHighlighted, setBarsInfo, delay)\n\n                i += 1\n            }\n        }\n        inPlaceSwap(i, j, arr)\n        pivotHighlighted = highlightBars(highlighted, [i], \"lightgreen\")\n        await animate(arr, pivotHighlighted, setBarsInfo, delay)\n        pivotIndex = i\n\n        return pivotIndex\n    }\n\n    let { array } = barsInfo\n    let n = array.length\n\n    console.log(\"Before quicksort:\", array)\n    await quickSortUtil(array, 0, n - 1)\n    console.log(\"After quicksort:\", array)\n\n    await animate(array, barsInfo.colors, setBarsInfo, 0)\n\n    return array\n}","import { heapSort } from './heap_sort';\nimport { megeSort } from './merge_sort';\nimport { insertionSort } from './insertion_sort';\nimport { selectionSort } from './selection_sort';\nimport { IFC_BarsInfo } from './../components/BarsContainer/BarsContainer';\nimport { bubbleSort } from './bubble_sort';\nimport { sleep } from './helpers';\nimport { scale, sortingAlgos } from './helpers';\nimport { quickSort } from './quick_sort';\n\nexport const swap = (i: number, j: number, array: number[]) => {\n    // console.log(`swapping ${i} and ${j}`);\n    let temp = array[i]\n    array[i] = array[j]\n    array[j] = temp\n\n    return [...array]\n}\n\nexport const inPlaceSwap = (i: number, j: number, array: number[]) => {\n    let temp = array[i]\n    array[i] = array[j]\n    array[j] = temp\n\n    return\n}\n\nexport const highlightBars = (colors: string[], indices: number[], color: string) => {\n    // console.log(colors)\n    let highlighted: string[] = []\n    for (let k = 0; k < colors.length; k++) {\n        if (indices.includes(k)) {\n            highlighted.push(color)\n        } else {\n            highlighted.push(colors[k])\n        }\n    }\n\n    return highlighted\n}\n\nexport const animate = async (newArray: number[], newColors: string[], setBarsInfo: React.Dispatch<React.SetStateAction<IFC_BarsInfo>>, delay: number) => {\n    setBarsInfo({\n        array: [...newArray],\n        colors: [...newColors]\n    })\n    await sleep(delay)\n}\n\nexport const sort = async (algoName: string, speed: number, barsInfo: IFC_BarsInfo, setBarsInfo: React.Dispatch<React.SetStateAction<IFC_BarsInfo>>) => {\n    speed = scale(speed, 1, 10, 1, 100)\n    switch (algoName) {\n        case sortingAlgos.BUBBLE_SORT:\n            return bubbleSort(barsInfo, setBarsInfo, speed)\n        case sortingAlgos.SELECTION_SORT:\n            // console.log(`${algoName} hasn't been implemented yet`)\n            return selectionSort(barsInfo, setBarsInfo, speed)\n        case sortingAlgos.INSERTION_SORT:\n            return insertionSort(barsInfo, setBarsInfo, speed)\n        case sortingAlgos.MERGE_SORT:\n            // console.log(`${algoName} hasn't been implemented yet`)\n            return megeSort(barsInfo, setBarsInfo, speed)\n        case sortingAlgos.QUICK_SORT:\n            // console.log(`${algoName} hasn't been implemented yet`)\n            return quickSort(barsInfo, setBarsInfo, speed)\n        case sortingAlgos.HEAP_SORT:\n            return heapSort(barsInfo, setBarsInfo, speed)\n        default:\n            return bubbleSort(barsInfo, setBarsInfo, speed)\n    }\n}","import React from 'react'\nimport { sortingAlgos } from '../../utils/helpers'\n\nimport './SortingAlgoOptions.min.css'\n\ninterface IFC_SortingAlgoOptionsProps {\n    sortingAlgo: string,\n    algoChangeHandler: React.MouseEventHandler<HTMLDivElement>\n}\n\nexport default function SortingAlgoOptions({ sortingAlgo, algoChangeHandler }: IFC_SortingAlgoOptionsProps) {\n    return (\n        <div className=\"sort-algo-options\">\n            <div\n                className={`sort-algo bubble ${sortingAlgo === sortingAlgos.BUBBLE_SORT ? \"active\" : \"\"}`}\n                data-value={sortingAlgos.BUBBLE_SORT}\n                onClick={algoChangeHandler}\n            >Bubble Sort</div>\n            <div\n                className={`sort-algo selection ${sortingAlgo === sortingAlgos.SELECTION_SORT ? \"active\" : \"\"}`}\n                data-value={sortingAlgos.SELECTION_SORT}\n                onClick={algoChangeHandler}\n            >Selction Sort</div>\n            <div\n                className={`sort-algo insertion ${sortingAlgo === sortingAlgos.INSERTION_SORT ? \"active\" : \"\"}`}\n                data-value={sortingAlgos.INSERTION_SORT}\n                onClick={algoChangeHandler}\n            >Insertion Sort</div>\n            <div\n                className={`sort-algo merge ${sortingAlgo === sortingAlgos.MERGE_SORT ? \"active\" : \"\"}`}\n                data-value={sortingAlgos.MERGE_SORT}\n                onClick={algoChangeHandler}\n            >Merge Sort</div>\n            <div className={`sort-algo quick ${sortingAlgo === sortingAlgos.QUICK_SORT ? \"active\" : \"\"}`}\n                data-value={sortingAlgos.QUICK_SORT}\n                onClick={algoChangeHandler}\n            >Quick Sort</div>\n            <div className={`sort-algo heap ${sortingAlgo === sortingAlgos.HEAP_SORT ? \"active\" : \"\"}`}\n                data-value={sortingAlgos.HEAP_SORT}\n                onClick={algoChangeHandler}\n            >Heap Sort</div>\n        </div>\n    )\n}\n","import React, { createContext, useContext, useState } from \"react\";\nimport { IFC_ProviderProps } from \"./barsInfoProvider\";\n\nexport type IFC_SortingStatusContextData = Boolean\n\nexport interface IFC_SortingStatusContextValue {\n    sortingStatus: IFC_SortingStatusContextData,\n    setSortingStatus: React.Dispatch<React.SetStateAction<IFC_SortingStatusContextData>>\n}\n\nexport const SortingStatusContext = createContext<IFC_SortingStatusContextValue | undefined>(undefined)\n\nconst SortingStatusProvider = (props: IFC_ProviderProps) => {\n    const [sortingStatus, setSortingStatus] = useState<IFC_SortingStatusContextData>(false)\n\n    return (\n        <SortingStatusContext.Provider value={{ sortingStatus, setSortingStatus }}>\n            {props.children}\n        </SortingStatusContext.Provider>\n    )\n}\n\nexport const useSortingStatus = () => {\n    const ctxValue = useContext(SortingStatusContext)\n    if (ctxValue === undefined) throw new Error(\n        \"Expected an AppProvider somewhere in the react tree to set context value\")\n    return ctxValue // now has type AppContextValue\n    // or even provide domain methods for better encapsulation\n}\n\nexport default SortingStatusProvider\n\n","import React, { ChangeEvent, useEffect, useRef, useState } from 'react'\nimport MenuBar from '../MenuBar/MenuBar'\n// import { useArray } from '../../contexts/arrayProvider'\n\nimport './Visualizer.min.css'\nimport BarsContainer from '../BarsContainer/BarsContainer'\nimport { makeStyles, Slider, withStyles } from '@material-ui/core'\nimport { generateArray, generateBarColors, sortingAlgos } from '../../utils/helpers'\nimport { sort } from '../../utils/sort'\nimport SortingAlgoOptions from '../SortingAlgoOptions/SortingAlgoOptions'\nimport { useBarsInfo } from '../../contexts/barsInfoProvider'\nimport { useSortingStatus } from '../../contexts/sortingStatusProvier'\n\nfunction Visualizer() {\n    const [sortingAlgo, setSortingAlgo] = useState(sortingAlgos.BUBBLE_SORT)\n    const [sortingSpeed, setSortingSpeed] = useState<number>(1)\n    const { barsInfo, setBarsInfo } = useBarsInfo()\n    const { setSortingStatus } = useSortingStatus()\n    const sortTestResultRef = useRef<HTMLDivElement>(null)\n\n    const styledClasses = useStyles()\n\n    // console.log(\"Rendering Visualizer \");\n    // console.log(initialColors)\n\n    useEffect(() => {\n        console.log(\"Visualizer mounted!\")\n    }, [])\n\n\n    const sliderChangeHandler = (e: ChangeEvent<{}>, value: number | number[]) => {\n        let newLength: number\n\n        if (typeof value === \"number\") {\n            newLength = value\n        } else {\n            newLength = value[0]\n        }\n\n        // setArray((prevArr) => {\n        //     return [...generateArray(newLength)]\n        // })\n\n        setBarsInfo(prevBarsInfo => {\n            console.log(\"Visualizer: setting barsInfo\")\n            return {\n                array: [...generateArray(newLength)],\n                colors: [...generateBarColors(newLength)]\n            }\n        })\n    }\n\n    const speedChangeHandler = (e: ChangeEvent<{}>, value: number | number[]) => {\n        let newVal: number\n\n        if (typeof value === \"number\") {\n            newVal = value\n        } else {\n            newVal = value[0]\n        }\n\n        setSortingSpeed(newVal)\n    }\n\n    const sortHandler = async () => {\n        // let beforeSorting = [...barsInfo.array]\n        // let actualSorted = beforeSorting.sort((a, b) => a - b)\n\n        setSortingStatus(true)\n        let afterSorting = await sort(sortingAlgo, sortingSpeed, barsInfo, setBarsInfo)\n        setSortingStatus(false)\n\n        // console.log(afterSorting)\n        // console.log(actualSorted);\n\n        // if (sortTestResultRef.current) {\n        //     sortTestResultRef.current.innerText = `${(JSON.stringify(afterSorting) === JSON.stringify(actualSorted))}`\n        // }\n    }\n\n    const algoChangeHandler = (e: any) => {\n        let value = e.target.dataset.value\n        setSortingAlgo(value)\n        // console.log(value)\n    }\n\n    return (\n        <div className=\"visualizer\">\n            <MenuBar sortHandler={sortHandler} />\n            <BarsContainer barsInfo={barsInfo} />\n            <PrettoSlider\n                className={styledClasses.slider}\n                valueLabelDisplay=\"auto\"\n                aria-label=\"pretto slider\"\n                defaultValue={20}\n                min={5}\n                max={200}\n                onChange={sliderChangeHandler}\n            />\n            <div className=\"speed-slider-container\">\n                {/* {sortingSpeed} */}\n                <PrettoSlider\n                    className={styledClasses.speedSlider}\n                    orientation=\"vertical\"\n                    // valueLabelDisplay=\"auto\"\n                    aria-label=\"pretto slider\"\n                    defaultValue={3}\n                    min={1}\n                    max={10}\n                    onChange={speedChangeHandler}\n                />\n            </div>\n            <div className=\"sort-test-result\" ref={sortTestResultRef}></div>\n            <SortingAlgoOptions sortingAlgo={sortingAlgo} algoChangeHandler={algoChangeHandler} />\n        </div>\n    )\n}\n\nconst useStyles = makeStyles({\n    slider: {\n        position: \"absolute\",\n        width: 1000,\n        left: '50%',\n        transform: 'translateX(-50%)',\n    },\n    speedSlider: {\n        position: \"absolute\",\n        right: 10,\n        top: 0,\n        height: '50px',\n        // width: '14px !important',\n        rail: {\n            height: 24,\n            width: \"14px !important\",\n            borderRadius: 24,\n            opacity: 1,\n        }\n    },\n})\n\n// Copied from Material-UI website\nconst PrettoSlider = withStyles({\n    root: {\n        color: 'rgb(31, 114, 87)',\n        height: 5,\n    },\n    thumb: {\n        height: 24,\n        width: 24,\n        backgroundColor: '#fff',\n        border: '2px solid currentColor',\n        marginTop: -8,\n        marginLeft: -12,\n        '&:focus, &:hover, &$active': {\n            boxShadow: 'inherit',\n        },\n    },\n    active: {},\n    valueLabel: {\n        left: 'calc(-50% + 4px)',\n    },\n    track: {\n        height: 8,\n        borderRadius: 4,\n    },\n    rail: {\n        height: 8,\n        borderRadius: 4,\n    },\n})(Slider);\n\nexport default Visualizer;","import React from 'react';\nimport Visualizer from './components/Visualizer/Visualizer';\n// import ArrayProvider from './contexts/arrayProvider';\n// import BarColorsProvider from './contexts/barColorsProvider';\nimport BarsInfoProvider from './contexts/barsInfoProvider';\nimport SortingStatusProvider, { useSortingStatus } from './contexts/sortingStatusProvier';\n\nimport './App.css'\n\nfunction App() {\n  return (\n    <SortingStatusProvider>\n      <BarsInfoProvider>\n        <AppWrapper />\n      </BarsInfoProvider>\n    </SortingStatusProvider>\n  );\n}\n\nfunction AppWrapper() {\n  const { sortingStatus } = useSortingStatus()\n\n  return (\n    <div className={`app ${sortingStatus ? \"inactive\" : \"\"}`}>\n      <Visualizer />\n    </div>\n  )\n\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nif (process.env.NODE_ENV === \"production\") {\n  console.log = () => { }\n}\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// // eslint-disable-next-line no-extend-native\n// Array.prototype.swap = function (x, y) {\n//   var b = this[x];\n//   this[x] = this[y];\n//   this[y] = b;\n//   return this;\n// }\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}