{"version":3,"sources":["utils/helpers.ts","contexts/barsInfoProvider.tsx","components/MenuBar/MenuBar.tsx","components/Bar/Bar.tsx","components/BarsContainer/BarsContainer.tsx","utils/merge_sort.ts","utils/insertion_sort.ts","utils/selection_sort.ts","utils/bubble_sort.ts","utils/sort.ts","components/SortingAlgoOptions/SortingAlgoOptions.tsx","components/Visualizer/Visualizer.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["sortingAlgos","resetArray","array","i","length","getRandomInt","generateArray","arr","Array","resetBarColors","colors","generateBarColors","min","max","Math","ceil","floor","random","sleep","delay","Promise","resolve","setTimeout","BarsInfoContext","createContext","undefined","useBarsInfo","ctxValue","useContext","Error","BarsInfoProvider","props","useState","barsInfo","setBarsInfo","Provider","value","children","MenuBar","sortHandler","useEffect","className","onClick","prevBarsInfo","console","log","Bar","val","width","spacing","index","showNumber","color","barStyles","height","left","style","BarsContainer","barsContainerStyles","nb","wb","map","num","idx","megeSort","speed","a","mergeTwoSortedArrays","mid","right","current","j","highlighted","iBackup","highlightBars","animate","mergeSortUtil","highlightedBounds","n","insertionSort","afterReset","selectionSort","lastIndex","largest","indexOfLargest","lastBarHighlighted","colorsAfterSwapping","swapped","swap","bubbleSort","dehighlited","temp","indices","k","includes","push","newArray","newColors","sort","algoName","inMin","outMin","SortingAlgoOptions","sortingAlgo","algoChangeHandler","data-value","useStyles","makeStyles","slider","position","transform","speedSlider","top","rail","borderRadius","opacity","PrettoSlider","withStyles","root","thumb","backgroundColor","border","marginTop","marginLeft","boxShadow","active","valueLabel","track","Slider","Visualizer","setSortingAlgo","sortingSpeed","setSortingSpeed","sortTestResultRef","useRef","styledClasses","valueLabelDisplay","aria-label","defaultValue","onChange","e","newLength","orientation","newVal","ref","target","dataset","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.23361c35.chunk.js","sourcesContent":["export const MIN_NUM = 10\nexport const MAX_NUM = 100\nexport const DEFAULT_ARRAY_LENGTH = 30\n\nexport const sortingAlgos = {\n    BUBBLE_SORT: \"bubble-sort\",\n    INSERTION_SORT: \"insertion-sort\",\n    SELECTION_SORT: \"selection-sort\",\n    MERGE_SORT: \"merge-sort\",\n    QUICK_SORT: \"quick-sort\"\n}\n\nexport const resetArray = (array: number[]) => {\n    for (let i = 0; i < array.length; i++) {\n        array[i] = getRandomInt(MIN_NUM, MAX_NUM)\n    }\n\n    return array\n}\n\nexport const generateArray = (length: number) => {\n    let arr = new Array(length)\n    return resetArray(arr)\n}\n\nexport const resetBarColors = (colors: string[]) => {\n    for (let i = 0; i < colors.length; i++) {\n        colors[i] = \"\"\n    }\n\n    return colors\n}\n\nexport const generateBarColors = (length: number) => {\n    let colors = new Array<string>(length)\n    return resetBarColors(colors)\n}\n\nexport const mapStateToProps = (state: any) => {\n    return { ...state }\n}\n\n// https://stackoverflow.com/questions/1527803/generating-random-whole-numbers-in-javascript-in-a-specific-range\nfunction getRandomInt(min: number, max: number) {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nexport const sleep = (delay: number) => {\n    return new Promise((resolve) => setTimeout(resolve, delay * 1000));\n}\n\n// https://stackoverflow.com/questions/10756313/javascript-jquery-map-a-range-of-numbers-to-another-range-of-numbers\nexport function scale(number: number, inMin: number, inMax: number, outMin: number, outMax: number) {\n    return (number - inMin) * (outMax - outMin) / (inMax - inMin) + outMin;\n}","import React, { useContext, createContext, useState, Dispatch, SetStateAction } from \"react\";\nimport { DEFAULT_ARRAY_LENGTH, generateArray, generateBarColors } from \"../utils/helpers\";\n\nexport interface IFC_ProviderProps {\n    children?: any\n}\n\nexport interface BarsInfoContextData {\n    array: number[],\n    colors: string[]\n}\n\nexport interface BarsInfoContextValue {\n    barsInfo: BarsInfoContextData;\n    setBarsInfo: Dispatch<SetStateAction<BarsInfoContextData>>;\n}\n\nexport const BarsInfoContext = createContext<BarsInfoContextValue | undefined>(undefined)\n\nconst BarsInfoProvider = (props: IFC_ProviderProps) => {\n    const [barsInfo, setBarsInfo] = useState<BarsInfoContextData>({\n        array: generateArray(DEFAULT_ARRAY_LENGTH),\n        colors: generateBarColors(DEFAULT_ARRAY_LENGTH)\n    })\n\n    return (\n        <BarsInfoContext.Provider value={{ barsInfo, setBarsInfo }}>\n            {props.children}\n        </BarsInfoContext.Provider>\n    )\n}\n\n// https://www.typescriptlang.org/play?ssl=26&ssc=1&pln=32&pc=1#code/JYWwDg9gTgLgBAJQKYEMDGMA0cDecAiwAzmCjGgBbYDKSM1MZSAghsBAHbYCuRSDTHnwDCnGEgAe8AL5wAZlAgg4AIiioMKgLAAoXZMiw4wDuKhz0SOAEkACooBuwACZIo9iGCK5dcP3EpgABtndQ4AfgAuOBQOAE8Abl1pXV0YOLArZjAwUVNJekZxOABeXGMiAFkkDm4AeUyOaIAjCAgg1A4EiuoXJAaalraO2LgUvR10zLhs3LECgDUUIO4rMpxffyIipGjZvPEpAXEknX84PkKmaMISMkoAHlor8VYYdg4H-fmjnYA+P6naSnfQSQzwNCcbYzHIHAqlRAaGAAOjQ6iYcKkX1hPxgSxWVgAPnBuBxXHITEhnH8ABSk8mU5wAShBOgM0AhUPgsw8TlcUARNLAii80Tsjj67hFRCZpT+PjO-khHGhAG1toILnRjkgALoI3j8HY0vDEaq1AZNeTLPjYYi9VyW6IWIJ8MYs1KKvzqGDcKAcOA0zbnPzYub5KTI3mSuAOZarEo4PAa8TYS46sbSP7BkPnHDCzxEVEUYKhGrjXOhgD03wjKOj-OzXrgHp0wM9clJbE4JL4tcOMBpso2zeV0IwEnxqwNIlxNP7BSZOeAckDE6naxKZXpSApHCpspgFEUAHc4PuzwBRKCKKBB5vnFSXsFIDBUmIBnkS-kXJRIE8UG4VgmHAR5WOiGCgeoVgwBAWqcnWsbxkgKhLs2Pp+gG67IXAVZVueEBnhQKDeFMWQ4nWG45nhcDQHASAODUcAFnyVjOEoKAgSAdAUBAzjeHIdHNHQZj0RwaAoF43BBGQHzJJ6Y7wMIQTADU8BlEOcoKucikBDAk7LDOLAUQOmk0dhQQVHADL7s42AcHBlCvgA1uer5IEQRAoFAcQAITJEAA\nexport const useBarsInfo = () => {\n    const ctxValue = useContext(BarsInfoContext)\n    if (ctxValue === undefined) throw new Error(\n        \"Expected an AppProvider somewhere in the react tree to set context value\")\n    return ctxValue // now has type AppContextValue\n    // or even provide domain methods for better encapsulation\n}\n\nexport default BarsInfoProvider","// import { useEffect } from 'react'\n// import { useEffect } from 'react'\n// import { useArray } from '../../contexts/arrayProvider'\nimport { useEffect } from 'react'\nimport { useBarsInfo } from '../../contexts/barsInfoProvider'\nimport { resetArray, resetBarColors } from '../../utils/helpers'\n\nimport './MenuBar.min.css'\n\ninterface MenuBarProps {\n    sortHandler: any\n}\n\nexport default function MenuBar({ sortHandler }: MenuBarProps) {\n    // const { setArray } = useArray()\n    const { barsInfo, setBarsInfo } = useBarsInfo()\n\n    // useEffect(() => {\n    //     console.log(\"MenuBar: array updated\")\n    // }, [array])\n\n    // useEffect(() => {\n    //     console.log(\"Menubar: SortHandler updated\")\n    // }, [sortHandler])\n\n    useEffect(() => {\n        // console.log(\"MenuBar: BarsInfo changed!!\")\n    }, [barsInfo])\n\n    // console.log(\"Rendering Menubar\")\n    // console.log(array);\n\n    const generateNewArray = () => {\n        // console.log(\"Generating...\")\n        // setArray((pervArr) => {\n        //     // console.log(\"Updating state\");\n        //     return [...resetArray(pervArr)]\n        // })\n\n        setBarsInfo(prevBarsInfo => {\n            console.log(\"MenuBar: Setting barsInfo\")\n            return {\n                array: resetArray(prevBarsInfo.array),\n                colors: resetBarColors(prevBarsInfo.colors)\n            }\n        })\n    }\n\n    return (\n        <div className=\"menu-bar\">\n            <button\n                className=\"generate-new-array-btn\"\n                onClick={generateNewArray}\n            >Generate New Array</button>\n            <div className=\"title\">Sorting Visualizer</div>\n            <button\n                className=\"sort-btn\"\n                onClick={sortHandler}\n            >Sort</button>\n        </div>\n    )\n}\n","import React from 'react'\n\nimport './Bar.min.css'\n\ninterface IFC_BarProps {\n    val: number;\n    index: number;\n    width: number;\n    spacing: number;\n    showNumber: Boolean;\n    color: string;\n}\n\nexport default function Bar({ val, width, spacing, index, showNumber, color }: IFC_BarProps) {\n\n    const barStyles = {\n        height: 4 * val,\n        width: width,\n        left: width * index + spacing * index\n    }\n\n    // console.log(\"Width: \", width);\n\n    return (\n        <div className={`bar ${color}`} style={barStyles}>\n            {\n                showNumber ? <span>{val}</span> : null\n            }\n        </div>\n    )\n}\n","import React from 'react'\nimport Bar from '../Bar/Bar'\n\nimport './BarsContainer.min.css'\n\nexport interface IFC_BarsInfo {\n    array: number[],\n    colors: string[]\n}\ninterface IFC_BarsContainerProps {\n    barsInfo: IFC_BarsInfo\n}\n\nexport default function BarsContainer(props: IFC_BarsContainerProps) {\n    let { array, colors } = props.barsInfo\n\n    // console.log(\"Rendering Bars Container \");\n\n    /*\n        width = nb * wb + (nb-1) * spacing\n        nb = no. of bars\n        wb = bar width\n        spacing = space b/w each bar\n\n        Hence wb = (width - ((nb-1) * spacing))/(nb)\n    */\n\n    const barsContainerStyles = {\n        width: 1000\n    }\n\n    let nb = array.length\n    let spacing = 2\n    let wb = barsContainerStyles.width / nb\n    wb -= spacing\n    let showNumber = array.length <= 45\n\n\n    return (\n        <div className={`bars-container`} style={barsContainerStyles}>\n            {array.map((num, idx) => <Bar val={num}\n                index={idx}\n                key={idx}\n                width={wb}\n                spacing={spacing}\n                showNumber={showNumber}\n                color={colors[idx]}\n            />)}\n        </div>\n    )\n}\n","import { IFC_BarsInfo } from \"../components/BarsContainer/BarsContainer\"\nimport { animate } from \"./sort\"\nimport { highlightBars } from \"./sort\"\n\nexport const megeSort = async (barsInfo: IFC_BarsInfo, setBarsInfo: React.Dispatch<React.SetStateAction<IFC_BarsInfo>>, speed: number) => {\n    let delay = 1 / speed\n\n    const mergeTwoSortedArrays = async (arr: number[], left: number, mid: number, right: number) => {\n        // console.log({ left, mid, right })\n        // We're actually dealing with an array from left1 to right2 in the original array\n        // [.....left1  ..... right2.....]\n        // For each element in the 2nd part find its correct position and shift the elements accordingly\n        // This is very similar to insertion sort\n\n        // console.log(\"Merging\", \"from \", left, \"to\", right)\n\n        for (let i = mid; i <= right; i++) {\n            let current = arr[i]\n            let j\n\n            for (j = i - 1; j >= left; j--) {\n                if (arr[j] <= current) {\n                    break\n                }\n            }\n            j += 1\n\n            // if i == j then the element is already in the correct position\n            let highlighted\n            let iBackup = i\n            if (i !== j) {\n                highlighted = highlightBars(barsInfo.colors, [i, j], \"red\")\n                await animate(array, highlighted, setBarsInfo, delay)\n\n                while (i > j) {\n                    arr[i] = arr[i - 1]\n                    i--;\n                }\n\n                arr[i] = current;\n            }\n            i = iBackup\n            highlighted = highlightBars(barsInfo.colors, [i, j], \"green\")\n            await animate(array, highlighted, setBarsInfo, delay)\n\n        }\n        // console.log(\"After merge:\", arr)\n\n        return\n    }\n\n    const mergeSortUtil = async (arr: number[], left: number, right: number) => {\n        // console.log({ left, right })\n        let highlightedBounds = highlightBars(barsInfo.colors, [left], \"yellow\")\n        highlightedBounds = highlightBars(highlightedBounds, [right], \"blue\")\n\n        await animate(arr, highlightedBounds, setBarsInfo, delay)\n\n        if (left >= right || right === left + 1) {\n            return\n        }\n        let mid = Math.floor((left + right) / 2)\n\n        await mergeSortUtil(arr, left, mid)\n        await mergeSortUtil(arr, mid + 1, right)\n        await mergeTwoSortedArrays(arr, left, mid, right)\n    }\n\n    let n = barsInfo.array.length\n    let array = barsInfo.array\n\n    // console.log(array)\n\n    await mergeSortUtil(array, 0, n - 1)\n    // console.log(array)\n    await animate(array, barsInfo.colors, setBarsInfo, 0)\n\n    return array\n}","import { resetBarColors } from './helpers';\nimport { animate, highlightBars } from './sort';\nimport { IFC_BarsInfo } from \"../components/BarsContainer/BarsContainer\"\n\nexport const insertionSort = async (barsInfo: IFC_BarsInfo, setBarsInfo: React.Dispatch<React.SetStateAction<IFC_BarsInfo>>, speed: number) => {\n    let delay = 1 / speed;\n\n    let { array } = barsInfo\n    let n = array.length\n\n    for (let i = 1; i < n; i++) {\n        let j\n        let current = array[i]\n        // Highlight the current element to indicate that we're finding the correct posistion of this element\n        let highlighted = highlightBars(barsInfo.colors, [i], \"purple\")\n        await animate(array, highlighted, setBarsInfo, delay)\n\n        // Find the actual position of array[i]\n        // => move the element left so that all the elements on right are bigger than this.\n        // This loop finds the index of such element\n        for (j = i - 1; j >= 0; j--) {\n            // Turn all these bars red\n            if (array[j] <= current) {\n                break\n            }\n            highlighted = highlightBars(highlighted, [j], \"red\")\n            // await animate(array, highlighted, setBarsInfo, delay)\n        }\n        // We actually move a step leftward because of forloop\n        // Increment it once to bring it to the correct position\n        j += 1\n\n        // if i == j then the element is in the correct position\n        let iBackup = i\n        if (i !== j) {\n            // highlight this bar as we need to replace it\n            highlighted = highlightBars(highlighted, [j], \"red\")\n            await animate(array, highlighted, setBarsInfo, delay)\n\n            // Move all the element from this j to i one step towards right\n            while (i > j) {\n                array[i] = array[i - 1]\n                i--;\n            }\n\n            // Bring the current element to this correct position\n            array[i] = current;\n            highlighted = highlightBars(highlighted, [iBackup], \"red\")\n        }\n        i = iBackup\n\n        highlighted = highlightBars(highlighted, [j], \"green\")\n        await animate(array, highlighted, setBarsInfo, delay)\n    }\n    let afterReset = resetBarColors(barsInfo.colors)\n    await animate(array, afterReset, setBarsInfo, delay)\n\n    return array\n}","import { resetBarColors } from './helpers';\nimport { highlightBars, swap, animate } from './sort';\nimport { IFC_BarsInfo } from './../components/BarsContainer/BarsContainer';\n\nexport const selectionSort = async (barsInfo: IFC_BarsInfo, setBarsInfo: React.Dispatch<React.SetStateAction<IFC_BarsInfo>>, speed: number) => {\n    let { array, colors } = barsInfo\n    let n = array.length\n    let delay = 1 / speed\n\n    let lastIndex = n - 1\n\n    let highlighted = colors\n    while (lastIndex >= 0) {\n        let largest = array[0]\n        let indexOfLargest = 0\n\n        let lastBarHighlighted = highlightBars(barsInfo.colors, [lastIndex], \"purple\")\n        // await animate(array, highlighted, setBarsInfo, delay)\n\n        let i\n        for (i = 0; i <= lastIndex; i++) {\n            // Time to update the new largest\n            if (array[i] > largest) {\n                // console.log(\"Largest is at\", i)\n                largest = array[i]\n                indexOfLargest = i\n            }\n\n            if (i === indexOfLargest) {\n                highlighted = highlightBars(lastBarHighlighted, [i], \"red\")\n                await animate(array, highlighted, setBarsInfo, delay)\n            }\n        }\n        highlighted = highlightBars(lastBarHighlighted, [indexOfLargest], \"green\")\n        await animate(array, highlighted, setBarsInfo, delay)\n\n        // Now we have the largest element.\n        // Swap it with the last element\n        // console.log(\"Swapping \", lastIndex, \"with\", indexOfLargest)\n\n        // Highlight the last element before swapping\n        // await animate(array, highlighted, setBarsInfo, delay)\n\n        let colorsAfterSwapping = highlightBars(highlighted, [indexOfLargest], \"purple\")\n        colorsAfterSwapping = highlightBars(colorsAfterSwapping, [lastIndex], \"green\")\n        let swapped = swap(lastIndex, indexOfLargest, array)\n\n        await animate(swapped, colorsAfterSwapping, setBarsInfo, delay)\n\n        array = [...swapped]\n        lastIndex -= 1\n    }\n\n    let afterReset = resetBarColors(barsInfo.colors)\n    await animate(array, afterReset, setBarsInfo, delay)\n\n    return array\n    // console.log(array)\n}","\nimport { IFC_BarsInfo } from './../components/BarsContainer/BarsContainer';\nimport { swap, highlightBars, animate } from './sort';\n\nexport const bubbleSort = async (barsInfo: IFC_BarsInfo, setBarsInfo: React.Dispatch<React.SetStateAction<IFC_BarsInfo>>, speed: number) => {\n    // console.log(\"Before sort: \", array);\n    let { array, } = barsInfo\n\n    let i, j, delay = 1 / speed\n    for (i = 0; i <= array.length; i++) {\n        for (j = 0; j < array.length - i - 1; j++) {\n            if (array[j] > array[j + 1]) {\n                // These two elements are in wrong order.\n                // Turn them red and wait for a few secs.\n                let highlighted = highlightBars(barsInfo.colors, [j, j + 1], \"red\")\n                await animate(array, highlighted, setBarsInfo, delay)\n\n                // Now swap these two numbers\n                let swapped = swap(j, j + 1, array)\n\n                // These are in the correct positions\n                // TUrn them green\n                let dehighlited = highlightBars(barsInfo.colors, [j, j + 1], \"green\")\n\n                // Update barsInfo and wait for a few secs\n                await animate(swapped, dehighlited, setBarsInfo, delay)\n            } else {\n                // They are in the positions they are supposed to be in\n                // Turn them green and wait for a few secs\n                let highlighted = highlightBars(barsInfo.colors, [j, j + 1], \"green\")\n                await animate(array, highlighted, setBarsInfo, delay)\n            }\n        }\n        // Now the last number is in sorted position\n        // Turn in green and wait\n        let highlighted = highlightBars(barsInfo.colors, [j], \"\")\n        await animate(array, highlighted, setBarsInfo, delay)\n    }\n    // console.log(\"After sort: \", array);\n    return array\n}","import { megeSort } from './merge_sort';\nimport { insertionSort } from './insertion_sort';\nimport { selectionSort } from './selection_sort';\nimport { IFC_BarsInfo } from './../components/BarsContainer/BarsContainer';\nimport { bubbleSort } from './bubble_sort';\nimport { sleep } from './helpers';\nimport { scale, sortingAlgos } from './helpers';\n\nexport const swap = (i: number, j: number, array: number[]) => {\n    // console.log(`swapping ${i} and ${j}`);\n    let temp = array[i]\n    array[i] = array[j]\n    array[j] = temp\n\n    return [...array]\n}\n\nexport const highlightBars = (colors: string[], indices: number[], color: string) => {\n    // console.log(colors)\n    let highlighted: string[] = []\n    for (let k = 0; k < colors.length; k++) {\n        if (indices.includes(k)) {\n            highlighted.push(color)\n        } else {\n            highlighted.push(colors[k])\n        }\n    }\n\n    return highlighted\n}\n\nexport const animate = async (newArray: number[], newColors: string[], setBarsInfo: React.Dispatch<React.SetStateAction<IFC_BarsInfo>>, delay: number) => {\n    setBarsInfo({\n        array: [...newArray],\n        colors: [...newColors]\n    })\n    await sleep(delay)\n}\n\nexport const sort = async (algoName: string, speed: number, barsInfo: IFC_BarsInfo, setBarsInfo: React.Dispatch<React.SetStateAction<IFC_BarsInfo>>) => {\n    speed = scale(speed, 1, 10, 1, 100)\n    switch (algoName) {\n        case sortingAlgos.BUBBLE_SORT:\n            return bubbleSort(barsInfo, setBarsInfo, speed)\n        case sortingAlgos.SELECTION_SORT:\n            // console.log(`${algoName} hasn't been implemented yet`)\n            return selectionSort(barsInfo, setBarsInfo, speed)\n        case sortingAlgos.INSERTION_SORT:\n            return insertionSort(barsInfo, setBarsInfo, speed)\n            break\n        case sortingAlgos.MERGE_SORT:\n            // console.log(`${algoName} hasn't been implemented yet`)\n            return megeSort(barsInfo, setBarsInfo, speed)\n        case sortingAlgos.QUICK_SORT:\n            console.log(`${algoName} hasn't been implemented yet`)\n            break\n        default:\n            return bubbleSort(barsInfo, setBarsInfo, speed)\n    }\n}","import React from 'react'\nimport { sortingAlgos } from '../../utils/helpers'\n\nimport './SortingAlgoOptions.min.css'\n\ninterface IFC_SortingAlgoOptionsProps {\n    sortingAlgo: string,\n    algoChangeHandler: React.MouseEventHandler<HTMLDivElement>\n}\n\nexport default function SortingAlgoOptions({ sortingAlgo, algoChangeHandler }: IFC_SortingAlgoOptionsProps) {\n    return (\n        <div className=\"sort-algo-options\">\n            <div\n                className={`sort-algo bubble ${sortingAlgo === sortingAlgos.BUBBLE_SORT ? \"active\" : \"\"}`}\n                data-value={sortingAlgos.BUBBLE_SORT}\n                onClick={algoChangeHandler}\n            >Bubble Sort</div>\n            <div\n                className={`sort-algo selection ${sortingAlgo === sortingAlgos.SELECTION_SORT ? \"active\" : \"\"}`}\n                data-value={sortingAlgos.SELECTION_SORT}\n                onClick={algoChangeHandler}\n            >Selction Sort</div>\n            <div\n                className={`sort-algo insertion ${sortingAlgo === sortingAlgos.INSERTION_SORT ? \"active\" : \"\"}`}\n                data-value={sortingAlgos.INSERTION_SORT}\n                onClick={algoChangeHandler}\n            >Insertion Sort</div>\n            <div\n                className={`sort-algo merge ${sortingAlgo === sortingAlgos.MERGE_SORT ? \"active\" : \"\"}`}\n                data-value={sortingAlgos.MERGE_SORT}\n                onClick={algoChangeHandler}\n            >Merge Sort</div>\n            <div className={`sort-algo merge not-implemented ${sortingAlgo === sortingAlgos.QUICK_SORT ? \"active\" : \"\"}`}\n                data-value={sortingAlgos.QUICK_SORT}\n                onClick={algoChangeHandler}\n            >Quick Sort</div>\n        </div>\n    )\n}\n","import React, { ChangeEvent, useEffect, useRef, useState } from 'react'\nimport MenuBar from '../MenuBar/MenuBar'\n// import { useArray } from '../../contexts/arrayProvider'\n\nimport './Visualizer.min.css'\nimport BarsContainer from '../BarsContainer/BarsContainer'\nimport { makeStyles, Slider, withStyles } from '@material-ui/core'\nimport { generateArray, generateBarColors, sortingAlgos } from '../../utils/helpers'\nimport { sort } from '../../utils/sort'\nimport SortingAlgoOptions from '../SortingAlgoOptions/SortingAlgoOptions'\nimport { useBarsInfo } from '../../contexts/barsInfoProvider'\n\nfunction Visualizer() {\n    const [sortingAlgo, setSortingAlgo] = useState(sortingAlgos.BUBBLE_SORT)\n    const [sortingSpeed, setSortingSpeed] = useState<number>(1)\n    const { barsInfo, setBarsInfo } = useBarsInfo()\n    const sortTestResultRef = useRef<HTMLDivElement>(null)\n\n    const styledClasses = useStyles()\n\n    // console.log(\"Rendering Visualizer \");\n    // console.log(initialColors)\n\n    useEffect(() => {\n        console.log(\"Visualizer mounted!\")\n    }, [])\n\n\n    const sliderChangeHandler = (e: ChangeEvent<{}>, value: number | number[]) => {\n        let newLength: number\n\n        if (typeof value === \"number\") {\n            newLength = value\n        } else {\n            newLength = value[0]\n        }\n\n        // setArray((prevArr) => {\n        //     return [...generateArray(newLength)]\n        // })\n\n        setBarsInfo(prevBarsInfo => {\n            console.log(\"Visualizer: setting barsInfo\")\n            return {\n                array: [...generateArray(newLength)],\n                colors: [...generateBarColors(newLength)]\n            }\n        })\n    }\n\n    const speedChangeHandler = (e: ChangeEvent<{}>, value: number | number[]) => {\n        let newVal: number\n\n        if (typeof value === \"number\") {\n            newVal = value\n        } else {\n            newVal = value[0]\n        }\n\n        setSortingSpeed(newVal)\n    }\n\n    const sortHandler = async () => {\n        sort(sortingAlgo, sortingSpeed, barsInfo, setBarsInfo)\n\n        // Use the following code instead to see the test result of sorting\n\n        /*\n        let beforeSorting = [...barsInfo.array]\n        let actualSorted = beforeSorting.sort((a, b) => a - b)\n        let afterSorting = sort(sortingAlgo, sortingSpeed, barsInfo, setBarsInfo)\n        console.log(afterSorting)\n        console.log(actualSorted);\n\n        if (sortTestResultRef.current) {\n            sortTestResultRef.current.innerText = `${(JSON.stringify(afterSorting) === JSON.stringify(actualSorted))}`\n        }\n        */\n    }\n\n    const algoChangeHandler = (e: any) => {\n        let value = e.target.dataset.value\n        setSortingAlgo(value)\n        // console.log(value)\n    }\n\n    return (\n        <div className=\"visualizer\">\n            <MenuBar sortHandler={sortHandler} />\n            <BarsContainer barsInfo={barsInfo} />\n            <PrettoSlider\n                className={styledClasses.slider}\n                valueLabelDisplay=\"auto\"\n                aria-label=\"pretto slider\"\n                defaultValue={20}\n                min={5}\n                max={200}\n                onChange={sliderChangeHandler}\n            />\n            <div className=\"speed-slider-container\">\n                {/* {sortingSpeed} */}\n                <PrettoSlider\n                    className={styledClasses.speedSlider}\n                    orientation=\"vertical\"\n                    // valueLabelDisplay=\"auto\"\n                    aria-label=\"pretto slider\"\n                    defaultValue={3}\n                    min={1}\n                    max={10}\n                    onChange={speedChangeHandler}\n                />\n            </div>\n            <div className=\"sort-test-result\" ref={sortTestResultRef}></div>\n            <SortingAlgoOptions sortingAlgo={sortingAlgo} algoChangeHandler={algoChangeHandler} />\n        </div>\n    )\n}\n\nconst useStyles = makeStyles({\n    slider: {\n        position: \"absolute\",\n        width: 1000,\n        left: '50%',\n        transform: 'translateX(-50%)',\n    },\n    speedSlider: {\n        position: \"absolute\",\n        right: 10,\n        top: 0,\n        height: '50px',\n        // width: '14px !important',\n        rail: {\n            height: 24,\n            width: \"14px !important\",\n            borderRadius: 24,\n            opacity: 1,\n        }\n    },\n})\n\n// Copied from Material-UI website\nconst PrettoSlider = withStyles({\n    root: {\n        color: 'rgb(31, 114, 87)',\n        height: 5,\n    },\n    thumb: {\n        height: 24,\n        width: 24,\n        backgroundColor: '#fff',\n        border: '2px solid currentColor',\n        marginTop: -8,\n        marginLeft: -12,\n        '&:focus, &:hover, &$active': {\n            boxShadow: 'inherit',\n        },\n    },\n    active: {},\n    valueLabel: {\n        left: 'calc(-50% + 4px)',\n    },\n    track: {\n        height: 8,\n        borderRadius: 4,\n    },\n    rail: {\n        height: 8,\n        borderRadius: 4,\n    },\n})(Slider);\n\nexport default Visualizer;","import React from 'react';\nimport Visualizer from './components/Visualizer/Visualizer';\n// import ArrayProvider from './contexts/arrayProvider';\n// import BarColorsProvider from './contexts/barColorsProvider';\nimport BarsInfoProvider from './contexts/barsInfoProvider';\n\nfunction App() {\n  return (\n    <BarsInfoProvider>\n      <Visualizer />\n    </BarsInfoProvider>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// // eslint-disable-next-line no-extend-native\n// Array.prototype.swap = function (x, y) {\n//   var b = this[x];\n//   this[x] = this[y];\n//   this[y] = b;\n//   return this;\n// }\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}