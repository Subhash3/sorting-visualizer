{"version":3,"sources":["utils/helpers.ts","contexts/arrayProvider.tsx","components/MenuBar/MenuBar.tsx","components/Bar/Bar.tsx","components/BarsContainer/BarsContainer.tsx","utils/selection_sort.ts","utils/bubble_sort.ts","utils/sort.ts","components/Visualizer/Visualizer.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["sortingAlgos","resetArray","array","i","length","getRandomInt","generateArray","arr","Array","min","max","Math","ceil","floor","random","sleep","delay","Promise","resolve","setTimeout","ArrayContext","createContext","undefined","useArray","ctxValue","useContext","Error","ArrayProvider","props","useState","setArray","Provider","value","children","MenuBar","sortHandler","console","log","className","onClick","pervArr","Bar","val","width","spacing","index","showNumber","color","barStyles","height","left","style","BarsContainer","barsInfo","colors","barsContainerStyles","nb","wb","map","num","idx","selectionSort","setBarsInfo","a","n","lastIndex","largest","indexOfLargest","highlighted","highlightBars","swapped","swap","dehighlighted","bubbleSort","j","dehighlited","temp","indices","k","includes","push","useStyles","makeStyles","slider","position","transform","PrettoSlider","withStyles","root","thumb","backgroundColor","border","marginTop","marginLeft","boxShadow","active","valueLabel","track","borderRadius","rail","Slider","Visualizer","initialColors","sortingAlgo","setSortingAlgo","styledClasses","useEffect","algoChangeHandler","e","target","dataset","algoName","sort","valueLabelDisplay","aria-label","defaultValue","onChange","newLength","prevArr","data-value","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c3581fd1.chunk.js","sourcesContent":["export const MIN_NUM = 10\nexport const MAX_NUM = 100\nexport const DEFAULT_ARRAY_LENGTH = 30\n\nexport const sortingAlgos = {\n    BUBBLE_SORT: \"bubble-sort\",\n    INSERTION_SORT: \"insertion-sort\",\n    SELECTION_SORT: \"selection-sort\",\n    MERGE_SORT: \"merge-sort\",\n    QUICK_SORT: \"quick-sort\"\n}\n\nexport const resetArray = (array: number[]) => {\n    for (let i = 0; i < array.length; i++) {\n        array[i] = getRandomInt(MIN_NUM, MAX_NUM)\n    }\n\n    return array\n}\n\nexport const generateArray = (length: number) => {\n    let arr = new Array(length)\n    return resetArray(arr)\n}\n\nexport const mapStateToProps = (state: any) => {\n    return { ...state }\n}\n\n// https://stackoverflow.com/questions/1527803/generating-random-whole-numbers-in-javascript-in-a-specific-range\nfunction getRandomInt(min: number, max: number) {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nexport const sleep = (delay: number) => {\n    return new Promise((resolve) => setTimeout(resolve, delay * 1000));\n}","import React, { useContext, createContext, useState, Dispatch, SetStateAction } from \"react\";\nimport { DEFAULT_ARRAY_LENGTH, generateArray } from \"../utils/helpers\";\n\nexport interface IFC_ProviderProps {\n    children?: any\n}\n\nexport type ArrayContextData = number[]\ntype ArrayContextValue = {\n    array: ArrayContextData;\n    setArray: Dispatch<SetStateAction<ArrayContextData>>;\n}\n\nexport const ArrayContext = createContext<ArrayContextValue | undefined>(undefined)\n\nconst ArrayProvider = (props: IFC_ProviderProps) => {\n    const [array, setArray] = useState(generateArray(DEFAULT_ARRAY_LENGTH))\n\n    return (\n        <ArrayContext.Provider value={{ array, setArray }}>\n            {props.children}\n        </ArrayContext.Provider>\n    )\n}\n\n// https://www.typescriptlang.org/play?ssl=26&ssc=1&pln=32&pc=1#code/JYWwDg9gTgLgBAJQKYEMDGMA0cDecAiwAzmCjGgBbYDKSM1MZSAghsBAHbYCuRSDTHnwDCnGEgAe8AL5wAZlAgg4AIiioMKgLAAoXZMiw4wDuKhz0SOAEkACooBuwACZIo9iGCK5dcP3EpgABtndQ4AfgAuOBQOAE8Abl1pXV0YOLArZjAwUVNJekZxOABeXGMiAFkkDm4AeUyOaIAjCAgg1A4EiuoXJAaalraO2LgUvR10zLhs3LECgDUUIO4rMpxffyIipGjZvPEpAXEknX84PkKmaMISMkoAHlor8VYYdg4H-fmjnYA+P6naSnfQSQzwNCcbYzHIHAqlRAaGAAOjQ6iYcKkX1hPxgSxWVgAPnBuBxXHITEhnH8ABSk8mU5wAShBOgM0AhUPgsw8TlcUARNLAii80Tsjj67hFRCZpT+PjO-khHGhAG1toILnRjkgALoI3j8HY0vDEaq1AZNeTLPjYYi9VyW6IWIJ8MYs1KKvzqGDcKAcOA0zbnPzYub5KTI3mSuAOZarEo4PAa8TYS46sbSP7BkPnHDCzxEVEUYKhGrjXOhgD03wjKOj-OzXrgHp0wM9clJbE4JL4tcOMBpso2zeV0IwEnxqwNIlxNP7BSZOeAckDE6naxKZXpSApHCpspgFEUAHc4PuzwBRKCKKBB5vnFSXsFIDBUmIBnkS-kXJRIE8UG4VgmHAR5WOiGCgeoVgwBAWqcnWsbxkgKhLs2Pp+gG67IXAVZVueEBnhQKDeFMWQ4nWG45nhcDQHASAODUcAFnyVjOEoKAgSAdAUBAzjeHIdHNHQZj0RwaAoF43BBGQHzJJ6Y7wMIQTADU8BlEOcoKucikBDAk7LDOLAUQOmk0dhQQVHADL7s42AcHBlCvgA1uer5IEQRAoFAcQAITJEAA\nexport const useArray = () => {\n    const ctxValue = useContext(ArrayContext)\n    if (ctxValue === undefined) throw new Error(\n        \"Expected an AppProvider somewhere in the react tree to set context value\")\n    return ctxValue // now has type AppContextValue\n    // or even provide domain methods for better encapsulation\n}\n\nexport default ArrayProvider","// import { useEffect } from 'react'\n// import { useEffect } from 'react'\nimport { useArray } from '../../contexts/arrayProvider'\nimport { resetArray } from '../../utils/helpers'\n\nimport './MenuBar.min.css'\n\ninterface MenuBarProps {\n    sortHandler: any\n}\n\nexport default function MenuBar({ sortHandler }: MenuBarProps) {\n    const { setArray } = useArray()\n\n    // useEffect(() => {\n    //     console.log(\"MenuBar: array updated\")\n    // }, [array])\n\n    // useEffect(() => {\n    //     console.log(\"Menubar: SortHandler updated\")\n    // }, [sortHandler])\n\n    console.log(\"Rendering Menubar\")\n    // console.log(array);\n\n    const generateNewArray = () => {\n        // console.log(\"Generating...\")\n        setArray((pervArr) => {\n            // console.log(\"Updating state\");\n            return [...resetArray(pervArr)]\n        })\n    }\n\n    return (\n        <div className=\"menu-bar\">\n            <button\n                className=\"generate-new-array-btn\"\n                onClick={generateNewArray}\n            >Generate New Array</button>\n            <div className=\"title\">Sorting Visualizer</div>\n            <button\n                className=\"sort-btn\"\n                onClick={sortHandler}\n            >Sort</button>\n        </div>\n    )\n}\n","import React from 'react'\n\nimport './Bar.min.css'\n\ninterface IFC_BarProps {\n    val: number;\n    index: number;\n    width: number;\n    spacing: number;\n    showNumber: Boolean;\n    color: string;\n}\n\nexport default function Bar({ val, width, spacing, index, showNumber, color }: IFC_BarProps) {\n\n    const barStyles = {\n        height: 4 * val,\n        width: width,\n        left: width * index + spacing * index\n    }\n\n    // console.log(\"Width: \", width);\n\n    return (\n        <div className={`bar ${color}`} style={barStyles}>\n            {\n                showNumber ? <span>{val}</span> : null\n            }\n        </div>\n    )\n}\n","import React from 'react'\nimport Bar from '../Bar/Bar'\n\nimport './BarsContainer.min.css'\n\nexport interface IFC_BarsInfo {\n    array: number[],\n    colors: string[]\n}\ninterface IFC_BarsContainerProps {\n    barsInfo: IFC_BarsInfo\n}\n\nexport default function BarsContainer(props: IFC_BarsContainerProps) {\n    let { array, colors } = props.barsInfo\n\n    console.log(\"Rendering Bars Container \");\n\n    /*\n        width = nb * wb + (nb-1) * spacing\n        nb = no. of bars\n        wb = bar width\n        spacing = space b/w each bar\n\n        Hence wb = (width - ((nb-1) * spacing))/(nb)\n    */\n\n    const barsContainerStyles = {\n        width: 1000\n    }\n\n    let nb = array.length\n    let spacing = 2\n    let wb = barsContainerStyles.width / nb\n    wb -= spacing\n    let showNumber = array.length <= 45\n\n\n    return (\n        <div className={`bars-container`} style={barsContainerStyles}>\n            {array.map((num, idx) => <Bar val={num}\n                index={idx}\n                key={idx}\n                width={wb}\n                spacing={spacing}\n                showNumber={showNumber}\n                color={colors[idx]}\n            />)}\n        </div>\n    )\n}\n","import { highlightBars, swap } from './sort';\nimport { IFC_BarsInfo } from './../components/BarsContainer/BarsContainer';\nimport { sleep } from './helpers';\n\nexport const selectionSort = async (barsInfo: IFC_BarsInfo, setBarsInfo: React.Dispatch<React.SetStateAction<IFC_BarsInfo>>) => {\n    let { array, colors } = barsInfo\n    let n = array.length\n    let delay = 5 / n\n\n    let lastIndex = n - 1\n\n    while (lastIndex >= 0) {\n        let largest = array[0]\n        let indexOfLargest = 0\n        for (let i = 0; i <= lastIndex; i++) {\n            // Time to update the new largest\n            if (array[i] > largest) {\n                // console.log(\"Largest is at\", i)\n                largest = array[i]\n                indexOfLargest = i\n            }\n\n            if (i === indexOfLargest) {\n                let highlighted = highlightBars(colors, [i], \"purple\")\n                setBarsInfo({\n                    array,\n                    colors: highlighted\n                })\n                await sleep(delay)\n            }\n        }\n        // Now we have the largest element.\n        // Swap it with the last element\n        // console.log(\"Swapping \", lastIndex, \"with\", indexOfLargest)\n\n        // Highlight the last element before swapping\n        let highlighted = highlightBars(colors, [lastIndex], \"red\")\n        setBarsInfo({\n            array,\n            colors: highlighted\n        })\n        await sleep(delay)\n\n        let swapped = swap(lastIndex, indexOfLargest, array)\n        let dehighlighted = highlightBars(colors, [lastIndex, indexOfLargest], \"\")\n        setBarsInfo({\n            array: [...swapped],\n            colors: dehighlighted\n        })\n        await sleep(delay)\n        array = [...swapped]\n        lastIndex -= 1\n    }\n\n    // console.log(array)\n}","\nimport { IFC_BarsInfo } from './../components/BarsContainer/BarsContainer';\nimport { sleep } from \"./helpers\";\nimport { swap, highlightBars } from './sort';\n\nexport const bubbleSort = async (barsInfo: IFC_BarsInfo, setBarsInfo: React.Dispatch<React.SetStateAction<IFC_BarsInfo>>) => {\n    // console.log(\"Before sort: \", array);\n    let { array, } = barsInfo\n\n    let i, j, delay = 0.2 / array.length\n    for (i = 0; i <= array.length; i++) {\n        for (j = 0; j < array.length - i - 1; j++) {\n            if (array[j] > array[j + 1]) {\n                // These two elements are in wrong order.\n                // Turn them red and wait for a few secs.\n                let highlighted = highlightBars(barsInfo.colors, [j, j + 1], \"red\")\n                setBarsInfo({\n                    array,\n                    colors: highlighted\n                })\n                await sleep(delay)\n\n                // Now swap these two numbers\n                let swapped = swap(j, j + 1, array)\n\n                // These are in the correct positions\n                // TUrn them green\n                let dehighlited = highlightBars(barsInfo.colors, [j, j + 1], \"green\")\n\n                // Update barsInfo and wait for a few secs\n                setBarsInfo({\n                    array: swapped,\n                    colors: dehighlited\n                })\n                await sleep(delay)\n            } else {\n                // They are in the positions they are supposed to be in\n                // Turn them green and wait for a few secs\n                let highlighted = highlightBars(barsInfo.colors, [j, j + 1], \"green\")\n                setBarsInfo({\n                    array,\n                    colors: highlighted\n                })\n                await sleep(delay)\n            }\n        }\n        // Now the last number is in sorted position\n        // Turn in green and wait\n        let highlighted = highlightBars(barsInfo.colors, [j], \"\")\n        setBarsInfo({\n            array,\n            colors: highlighted\n        })\n        await sleep(delay)\n\n    }\n    // console.log(\"After sort: \", array);\n}","import { selectionSort } from './selection_sort';\nimport { IFC_BarsInfo } from './../components/BarsContainer/BarsContainer';\nimport { bubbleSort } from './bubble_sort';\nimport { sortingAlgos } from './helpers';\n\nexport const swap = (i: number, j: number, array: number[]) => {\n    // console.log(`swapping ${i} and ${j}`);\n    let temp = array[i]\n    array[i] = array[j]\n    array[j] = temp\n\n    return [...array]\n}\n\nexport const highlightBars = (colors: string[], indices: number[], color: string) => {\n    let highlighted: string[] = []\n    for (let k = 0; k < colors.length; k++) {\n        if (indices.includes(k)) {\n            highlighted.push(color)\n        } else {\n            highlighted.push(colors[k])\n        }\n    }\n\n    return highlighted\n}\n\nexport const sort = (algoName: string, barsInfo: IFC_BarsInfo, setBarsInfo: React.Dispatch<React.SetStateAction<IFC_BarsInfo>>) => {\n    switch (algoName) {\n        case sortingAlgos.BUBBLE_SORT:\n            bubbleSort(barsInfo, setBarsInfo)\n            break\n        case sortingAlgos.SELECTION_SORT:\n            // console.log(`${algoName} hasn't been implemented yet`)\n            selectionSort(barsInfo, setBarsInfo)\n            break\n        case sortingAlgos.INSERTION_SORT:\n            console.log(`${algoName} hasn't been implemented yet`)\n            break\n        case sortingAlgos.MERGE_SORT:\n            console.log(`${algoName} hasn't been implemented yet`)\n            break\n        case sortingAlgos.QUICK_SORT:\n            console.log(`${algoName} hasn't been implemented yet`)\n            break\n        default:\n            bubbleSort(barsInfo, setBarsInfo)\n            break\n    }\n}","import React, { ChangeEvent, useEffect, useState } from 'react'\nimport MenuBar from '../MenuBar/MenuBar'\nimport { useArray } from '../../contexts/arrayProvider'\n\nimport './Visualizer.min.css'\nimport BarsContainer, { IFC_BarsInfo } from '../BarsContainer/BarsContainer'\nimport { makeStyles, Slider, withStyles } from '@material-ui/core'\nimport { generateArray, sortingAlgos } from '../../utils/helpers'\nimport { sort } from '../../utils/sort'\n\nfunction Visualizer() {\n    const { array, setArray } = useArray()\n    const initialColors = array.map(num => \"\")\n    const [sortingAlgo, setSortingAlgo] = useState(sortingAlgos.BUBBLE_SORT)\n    const [barsInfo, setBarsInfo] = useState<IFC_BarsInfo>({\n        array: array,\n        colors: []\n    })\n    const styledClasses = useStyles()\n\n    // console.log(\"Rendering Visualizer \", array);\n    // console.log(initialColors)\n\n    useEffect(() => {\n        console.log(\"Visualizer mounted!\")\n        setBarsInfo({\n            array: array,\n            colors: initialColors\n        })\n        // setArray(resetArray(array))\n    }, [])\n\n    // When the array is modified, update the barsInfo as well.\n    useEffect(() => {\n        // console.log(\"Array changed. Time to change barsInfo\");\n        setBarsInfo({\n            array: array,\n            colors: initialColors\n        })\n    }, [array])\n\n    const sliderChangeHandler = (e: ChangeEvent<{}>, value: number | number[]) => {\n        let newLength: number\n\n        if (typeof value === \"number\") {\n            newLength = value\n        } else {\n            newLength = value[0]\n        }\n\n        setArray((prevArr) => {\n            return [...generateArray(newLength)]\n        })\n    }\n\n    const sortHandler = () => {\n        sort(sortingAlgo, barsInfo, setBarsInfo)\n    }\n\n    const algoChangeHandler = (e: any) => {\n        let value = e.target.dataset.value\n        setSortingAlgo(value)\n        // console.log(value)\n    }\n\n    return (\n        <div className=\"visualizer\">\n            <MenuBar sortHandler={sortHandler} />\n            <BarsContainer barsInfo={barsInfo} />\n            <PrettoSlider\n                className={styledClasses.slider}\n                valueLabelDisplay=\"auto\"\n                aria-label=\"pretto slider\"\n                defaultValue={20}\n                min={5}\n                max={200}\n                onChange={sliderChangeHandler}\n            />\n            <div className=\"sort-algo-options\">\n                <div\n                    className={`sort-algo bubble ${sortingAlgo === sortingAlgos.BUBBLE_SORT ? \"active\" : \"\"}`}\n                    data-value={sortingAlgos.BUBBLE_SORT}\n                    onClick={algoChangeHandler}\n                >Bubble Sort</div>\n                <div\n                    className={`sort-algo selection ${sortingAlgo === sortingAlgos.SELECTION_SORT ? \"active\" : \"\"}`}\n                    data-value={sortingAlgos.SELECTION_SORT}\n                    onClick={algoChangeHandler}\n                >Selction Sort</div>\n                <div\n                    className={`sort-algo insertion ${sortingAlgo === sortingAlgos.INSERTION_SORT ? \"active\" : \"\"}`}\n                    data-value={sortingAlgos.INSERTION_SORT}\n                    onClick={algoChangeHandler}\n                >Insertion Sort</div>\n                <div\n                    className={`sort-algo merge ${sortingAlgo === sortingAlgos.MERGE_SORT ? \"active\" : \"\"}`}\n                    data-value={sortingAlgos.MERGE_SORT}\n                    onClick={algoChangeHandler}\n                >Merge Sort</div>\n                <div className={`sort-algo merge ${sortingAlgo === sortingAlgos.QUICK_SORT ? \"active\" : \"\"}`}\n                    data-value={sortingAlgos.QUICK_SORT}\n                    onClick={algoChangeHandler}\n                >Quick Sort</div>\n            </div>\n        </div>\n    )\n}\n\nconst useStyles = makeStyles({\n    slider: {\n        position: \"absolute\",\n        width: 1000,\n        left: '50%',\n        transform: 'translateX(-50%)',\n    }\n})\n\n// Copied from Material-UI website\nconst PrettoSlider = withStyles({\n    root: {\n        color: 'rgb(31, 114, 87)',\n        height: 5,\n    },\n    thumb: {\n        height: 24,\n        width: 24,\n        backgroundColor: '#fff',\n        border: '2px solid currentColor',\n        marginTop: -8,\n        marginLeft: -12,\n        '&:focus, &:hover, &$active': {\n            boxShadow: 'inherit',\n        },\n    },\n    active: {},\n    valueLabel: {\n        left: 'calc(-50% + 4px)',\n    },\n    track: {\n        height: 8,\n        borderRadius: 4,\n    },\n    rail: {\n        height: 8,\n        borderRadius: 4,\n    },\n})(Slider);\n\nexport default Visualizer;","import React from 'react';\nimport Visualizer from './components/Visualizer/Visualizer';\nimport ArrayProvider from './contexts/arrayProvider';\n\nfunction App() {\n  return (\n    <ArrayProvider>\n      <Visualizer />\n    </ArrayProvider>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// // eslint-disable-next-line no-extend-native\n// Array.prototype.swap = function (x, y) {\n//   var b = this[x];\n//   this[x] = this[y];\n//   this[y] = b;\n//   return this;\n// }\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}